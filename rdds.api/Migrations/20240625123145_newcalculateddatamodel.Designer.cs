// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rdds.api.Data;

#nullable disable

namespace rdds.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240625123145_newcalculateddatamodel")]
    partial class newcalculateddatamodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "16b06892-a86f-42e0-9f4c-01196081f502",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "706eaf20-b21d-4bcd-ae07-be98600ff3e8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rdds.api.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("rdds.api.Models.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RoadCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("SummaryId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RoadCategoryId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("rdds.api.Models.AttemptSummaryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptId")
                        .HasColumnType("integer");

                    b.Property<double>("TotalLength")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId")
                        .IsUnique();

                    b.ToTable("AttemptSummaryDatas");
                });

            modelBuilder.Entity("rdds.api.Models.CalculatedData", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AttemptId")
                        .HasColumnType("integer");

                    b.Property<float>("Velocity")
                        .HasColumnType("real");

                    b.HasKey("Timestamp");

                    b.HasIndex("AttemptId");

                    b.ToTable("CalculatedDatas");
                });

            modelBuilder.Entity("rdds.api.Models.Device", b =>
                {
                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MacAddress");

                    b.HasIndex("AppUserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("rdds.api.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("rdds.api.Models.RoadCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("TotalLength")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("RoadCategories");
                });

            modelBuilder.Entity("rdds.api.Models.RoadData", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AttemptId")
                        .HasColumnType("integer");

                    b.Property<float>("Euclidean")
                        .HasColumnType("real");

                    b.Property<float>("Pitch")
                        .HasColumnType("real");

                    b.Property<float>("Roll")
                        .HasColumnType("real");

                    b.Property<float>("Velocity")
                        .HasColumnType("real");

                    b.HasKey("Timestamp");

                    b.HasIndex("AttemptId");

                    b.ToTable("RoadDatas");
                });

            modelBuilder.Entity("rdds.api.Models.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rdds.api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rdds.api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rdds.api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rdds.api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rdds.api.Models.Attempt", b =>
                {
                    b.HasOne("rdds.api.Models.Device", "Device")
                        .WithMany("Attempts")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rdds.api.Models.RoadCategory", "RoadCategory")
                        .WithMany("Attempts")
                        .HasForeignKey("RoadCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Device");

                    b.Navigation("RoadCategory");
                });

            modelBuilder.Entity("rdds.api.Models.AttemptSummaryData", b =>
                {
                    b.HasOne("rdds.api.Models.Attempt", "Attempt")
                        .WithOne("SummaryData")
                        .HasForeignKey("rdds.api.Models.AttemptSummaryData", "AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("rdds.api.Models.LengthData", "LengthData", b1 =>
                        {
                            b1.Property<Guid>("AttemptSummaryDataId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Baik")
                                .HasColumnType("double precision")
                                .HasColumnName("RoadLength_Baik");

                            b1.Property<double>("RusakBerat")
                                .HasColumnType("double precision")
                                .HasColumnName("RoadLength_RusakBerat");

                            b1.Property<double>("RusakRingan")
                                .HasColumnType("double precision")
                                .HasColumnName("RoadLength_RusakRingan");

                            b1.Property<double>("Sedang")
                                .HasColumnType("double precision")
                                .HasColumnName("RoadLength_Sedang");

                            b1.HasKey("AttemptSummaryDataId");

                            b1.ToTable("AttemptSummaryDatas");

                            b1.WithOwner()
                                .HasForeignKey("AttemptSummaryDataId");
                        });

                    b.OwnsOne("rdds.api.Models.PercentageData", "PercentageData", b1 =>
                        {
                            b1.Property<Guid>("AttemptSummaryDataId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Baik")
                                .HasColumnType("double precision")
                                .HasColumnName("Percent_Baik");

                            b1.Property<double>("RusakBerat")
                                .HasColumnType("double precision")
                                .HasColumnName("Percent_RusakBerat");

                            b1.Property<double>("RusakRingan")
                                .HasColumnType("double precision")
                                .HasColumnName("Percent_RusakRingan");

                            b1.Property<double>("Sedang")
                                .HasColumnType("double precision")
                                .HasColumnName("Percent_Sedang");

                            b1.HasKey("AttemptSummaryDataId");

                            b1.ToTable("AttemptSummaryDatas");

                            b1.WithOwner()
                                .HasForeignKey("AttemptSummaryDataId");
                        });

                    b.Navigation("Attempt");

                    b.Navigation("LengthData");

                    b.Navigation("PercentageData");
                });

            modelBuilder.Entity("rdds.api.Models.CalculatedData", b =>
                {
                    b.HasOne("rdds.api.Models.Attempt", "Attempt")
                        .WithMany("CalculatedDatas")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("rdds.api.Models.Coordinate", "CoordinateEnd", b1 =>
                        {
                            b1.Property<DateTimeOffset>("CalculatedDataTimestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("LatitudeEnd");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("LongitudeEnd");

                            b1.HasKey("CalculatedDataTimestamp");

                            b1.ToTable("CalculatedDatas");

                            b1.WithOwner()
                                .HasForeignKey("CalculatedDataTimestamp");
                        });

                    b.OwnsOne("rdds.api.Models.Coordinate", "CoordinateStart", b1 =>
                        {
                            b1.Property<DateTimeOffset>("CalculatedDataTimestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("LatitudeStart");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("LongitudeStart");

                            b1.HasKey("CalculatedDataTimestamp");

                            b1.ToTable("CalculatedDatas");

                            b1.WithOwner()
                                .HasForeignKey("CalculatedDataTimestamp");
                        });

                    b.OwnsOne("rdds.api.Models.InternationalRoughnessIndex", "IRI", b1 =>
                        {
                            b1.Property<DateTimeOffset>("CalculatedDataTimestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("Average")
                                .HasColumnType("real")
                                .HasColumnName("IRI_Average");

                            b1.Property<string>("AverageProfile")
                                .HasColumnType("text")
                                .HasColumnName("Average_Profile");

                            b1.Property<float>("Euclidean")
                                .HasColumnType("real")
                                .HasColumnName("IRI_Euclidean");

                            b1.Property<string>("EuclideanProfile")
                                .HasColumnType("text")
                                .HasColumnName("Euclidean_Profile");

                            b1.Property<float>("Pitch")
                                .HasColumnType("real")
                                .HasColumnName("IRI_Pitch");

                            b1.Property<string>("PitchProfile")
                                .HasColumnType("text")
                                .HasColumnName("Pitch_Profile");

                            b1.Property<float>("Roll")
                                .HasColumnType("real")
                                .HasColumnName("IRI_Roll");

                            b1.Property<string>("RollProfile")
                                .HasColumnType("text")
                                .HasColumnName("Roll_Profile");

                            b1.HasKey("CalculatedDataTimestamp");

                            b1.ToTable("CalculatedDatas");

                            b1.WithOwner()
                                .HasForeignKey("CalculatedDataTimestamp");
                        });

                    b.Navigation("Attempt");

                    b.Navigation("CoordinateEnd")
                        .IsRequired();

                    b.Navigation("CoordinateStart")
                        .IsRequired();

                    b.Navigation("IRI")
                        .IsRequired();
                });

            modelBuilder.Entity("rdds.api.Models.Device", b =>
                {
                    b.HasOne("rdds.api.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("rdds.api.Models.RoadData", b =>
                {
                    b.HasOne("rdds.api.Models.Attempt", "Attempt")
                        .WithMany("RoadDatas")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("rdds.api.Models.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<DateTimeOffset>("RoadDataTimestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("Latitude");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("Longitude");

                            b1.HasKey("RoadDataTimestamp");

                            b1.ToTable("RoadDatas");

                            b1.WithOwner()
                                .HasForeignKey("RoadDataTimestamp");
                        });

                    b.Navigation("Attempt");

                    b.Navigation("Coordinate")
                        .IsRequired();
                });

            modelBuilder.Entity("rdds.api.Models.UserPermission", b =>
                {
                    b.HasOne("rdds.api.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rdds.api.Models.AppUser", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rdds.api.Models.AppUser", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("rdds.api.Models.Attempt", b =>
                {
                    b.Navigation("CalculatedDatas");

                    b.Navigation("RoadDatas");

                    b.Navigation("SummaryData");
                });

            modelBuilder.Entity("rdds.api.Models.Device", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("rdds.api.Models.Permission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("rdds.api.Models.RoadCategory", b =>
                {
                    b.Navigation("Attempts");
                });
#pragma warning restore 612, 618
        }
    }
}
